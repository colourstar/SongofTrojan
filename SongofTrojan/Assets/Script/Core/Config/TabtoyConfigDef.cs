// Generated by github.com/davyxu/tabtoy
// Version: 2.8.7
// DO NOT EDIT!!
using System.Collections.Generic;

namespace table
{
	
	

	// Defined in table: Config
	
	public partial class Config
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// Action
		/// </summary>
		public List<ActionDefine> Action = new List<ActionDefine>(); 
		
		/// <summary> 
		/// Story
		/// </summary>
		public List<StoryDefine> Story = new List<StoryDefine>(); 
		
		/// <summary> 
		/// Role
		/// </summary>
		public List<RoleDefine> Role = new List<RoleDefine>(); 
		
		/// <summary> 
		/// Map
		/// </summary>
		public List<MapDefine> Map = new List<MapDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, ActionDefine> _ActionByID = new Dictionary<int, ActionDefine>();
        public ActionDefine GetActionByID(int ID, ActionDefine def = default(ActionDefine))
        {
            ActionDefine ret;
            if ( _ActionByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ActionDefine) )
			{
				TableLogger.ErrorLine("GetActionByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<string, ActionDefine> _ActionByName = new Dictionary<string, ActionDefine>();
        public ActionDefine GetActionByName(string Name, ActionDefine def = default(ActionDefine))
        {
            ActionDefine ret;
            if ( _ActionByName.TryGetValue( Name, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ActionDefine) )
			{
				TableLogger.ErrorLine("GetActionByName failed, Name: {0}", Name);
			}

            return def;
        }
		Dictionary<int, StoryDefine> _StoryByID = new Dictionary<int, StoryDefine>();
        public StoryDefine GetStoryByID(int ID, StoryDefine def = default(StoryDefine))
        {
            StoryDefine ret;
            if ( _StoryByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(StoryDefine) )
			{
				TableLogger.ErrorLine("GetStoryByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, RoleDefine> _RoleByID = new Dictionary<int, RoleDefine>();
        public RoleDefine GetRoleByID(int ID, RoleDefine def = default(RoleDefine))
        {
            RoleDefine ret;
            if ( _RoleByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(RoleDefine) )
			{
				TableLogger.ErrorLine("GetRoleByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, MapDefine> _MapByID = new Dictionary<int, MapDefine>();
        public MapDefine GetMapByID(int ID, MapDefine def = default(MapDefine))
        {
            MapDefine ret;
            if ( _MapByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MapDefine) )
			{
				TableLogger.ErrorLine("GetMapByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<string, MapDefine> _MapByName = new Dictionary<string, MapDefine>();
        public MapDefine GetMapByName(string Name, MapDefine def = default(MapDefine))
        {
            MapDefine ret;
            if ( _MapByName.TryGetValue( Name, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(MapDefine) )
			{
				TableLogger.ErrorLine("GetMapByName failed, Name: {0}", Name);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Config> _ConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<Config> ConfigDeserializeHandler
		{
			get
			{
				if (_ConfigDeserializeHandler == null )
				{
					_ConfigDeserializeHandler = new tabtoy.DeserializeHandler<Config>(Deserialize);
				}

				return _ConfigDeserializeHandler;
			}
		}
		public static void Deserialize( Config ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Action.Add( reader.ReadStruct<ActionDefine>(ActionDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.Story.Add( reader.ReadStruct<StoryDefine>(StoryDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.Role.Add( reader.ReadStruct<RoleDefine>(RoleDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.Map.Add( reader.ReadStruct<MapDefine>(MapDefineDeserializeHandler) );
                	}
                	break; 
                }
             }

			
			// Build Action Index
			for( int i = 0;i< ins.Action.Count;i++)
			{
				var element = ins.Action[i];
				
				ins._ActionByID.Add(element.ID, element);
				
				ins._ActionByName.Add(element.Name, element);
				
			}
			
			// Build Story Index
			for( int i = 0;i< ins.Story.Count;i++)
			{
				var element = ins.Story[i];
				
				ins._StoryByID.Add(element.ID, element);
				
			}
			
			// Build Role Index
			for( int i = 0;i< ins.Role.Count;i++)
			{
				var element = ins.Role[i];
				
				ins._RoleByID.Add(element.ID, element);
				
			}
			
			// Build Map Index
			for( int i = 0;i< ins.Map.Count;i++)
			{
				var element = ins.Map[i];
				
				ins._MapByID.Add(element.ID, element);
				
				ins._MapByName.Add(element.Name, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<ActionDefine> _ActionDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ActionDefine> ActionDefineDeserializeHandler
		{
			get
			{
				if (_ActionDefineDeserializeHandler == null )
				{
					_ActionDefineDeserializeHandler = new tabtoy.DeserializeHandler<ActionDefine>(Deserialize);
				}

				return _ActionDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ActionDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ScriptName = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<StoryDefine> _StoryDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<StoryDefine> StoryDefineDeserializeHandler
		{
			get
			{
				if (_StoryDefineDeserializeHandler == null )
				{
					_StoryDefineDeserializeHandler = new tabtoy.DeserializeHandler<StoryDefine>(Deserialize);
				}

				return _StoryDefineDeserializeHandler;
			}
		}
		public static void Deserialize( StoryDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ActionType = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Args1 = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Args2 = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.Args3 = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.Args4 = reader.ReadString();
                	}
                	break; 
                	case 0x60007:
                	{
						ins.Args5 = reader.ReadString();
                	}
                	break; 
                	case 0x60008:
                	{
						ins.Args6 = reader.ReadString();
                	}
                	break; 
                	case 0x60009:
                	{
						ins.Args7 = reader.ReadString();
                	}
                	break; 
                	case 0x6000a:
                	{
						ins.Args8 = reader.ReadString();
                	}
                	break; 
                	case 0x7000b:
                	{
						ins.InitOpen = reader.ReadBool();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<RoleDefine> _RoleDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<RoleDefine> RoleDefineDeserializeHandler
		{
			get
			{
				if (_RoleDefineDeserializeHandler == null )
				{
					_RoleDefineDeserializeHandler = new tabtoy.DeserializeHandler<RoleDefine>(Deserialize);
				}

				return _RoleDefineDeserializeHandler;
			}
		}
		public static void Deserialize( RoleDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.NormalDrawing = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<MapDefine> _MapDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<MapDefine> MapDefineDeserializeHandler
		{
			get
			{
				if (_MapDefineDeserializeHandler == null )
				{
					_MapDefineDeserializeHandler = new tabtoy.DeserializeHandler<MapDefine>(Deserialize);
				}

				return _MapDefineDeserializeHandler;
			}
		}
		public static void Deserialize( MapDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.MapType = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.ShowName = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.ChildMap = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		#endregion
	

	} 

	// Defined in table: Action
	
	public partial class ActionDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 动作名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 脚本名称
		/// </summary>
		public string ScriptName = ""; 
	
	

	} 

	// Defined in table: Story
	
	public partial class StoryDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 剧情名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 动作类型
		/// </summary>
		public string ActionType = ""; 
		
		/// <summary> 
		/// 参数1
		/// </summary>
		public string Args1 = ""; 
		
		/// <summary> 
		/// 参数2
		/// </summary>
		public string Args2 = ""; 
		
		/// <summary> 
		/// 参数3
		/// </summary>
		public string Args3 = ""; 
		
		/// <summary> 
		/// 参数4
		/// </summary>
		public string Args4 = ""; 
		
		/// <summary> 
		/// 参数5
		/// </summary>
		public string Args5 = ""; 
		
		/// <summary> 
		/// 参数6
		/// </summary>
		public string Args6 = ""; 
		
		/// <summary> 
		/// 参数7
		/// </summary>
		public string Args7 = ""; 
		
		/// <summary> 
		/// 参数8
		/// </summary>
		public string Args8 = ""; 
		
		/// <summary> 
		/// 开场启动
		/// </summary>
		public bool InitOpen = false; 
	
	

	} 

	// Defined in table: Role
	
	public partial class RoleDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 人物名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 普通立绘
		/// </summary>
		public string NormalDrawing = ""; 
	
	

	} 

	// Defined in table: Map
	
	public partial class MapDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 地图名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 地图类型
		/// </summary>
		public string MapType = ""; 
		
		/// <summary> 
		/// 显示名称
		/// </summary>
		public string ShowName = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 子地图
		/// </summary>
		public string ChildMap = ""; 
	
	

	} 

}
